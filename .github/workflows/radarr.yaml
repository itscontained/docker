name: radarr
on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Use this tag instead of most recent'
        required: false
      ignore-existing-tag:
        description: 'Ignore existing tag if "true"'
        required: false
env:
  IMAGES: ${{ github.repository_owner }}/${{ github.workflow }}
  PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v7"
jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.check-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Upstream Version
        id: check
        run: echo ::set-env name=version::$(curl -s "https://radarr.lidarr.audio/v1/update/aphrodite/changes?os=linux" | jq -r '.[0].version')
      - uses: ./.github/actions/tag-check-action
        name: Check Tag Against DockerHub
        id: check-tag
        with:
          image: ${{ env.IMAGES }}
          tag: ${{ github.event.inputs.tags || env.version }}
  prepare:
    needs: version-check
    if: ${{ ! needs.version-check.outputs.tag || github.event.inputs.ignore-existing-tag }}
    runs-on: ubuntu-latest
    outputs:
      fully-qualified-target-images: ${{ steps.gen-tags.outputs.fully-qualified-target-images }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: ./.github/actions/docker-target-image-list-action
        name: Generate Target Images
        id: gen-tags
        with:
          images: ${{ env.IMAGES }}
          tags: ${{ needs.version-check.outputs.tag }}
      - name: Setup Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
  build:
    needs: [version-check, prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./images/${{ github.workflow }}/Dockerfile
          build-args: VERSION=${{ needs.version-check.outputs.tag }}
          platforms: ${{ matrix.platform }}
          tags: ${{ needs.prepare.outputs.fully-qualified-target-images }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Inspect
        run: |
          IFS=',' read -r -a images <<< "${{ needs.prepare.outputs.fully-qualified-target-images }}"
          for image in "${images[@]}"; do
              docker buildx imagetools inspect ${image}
          done
  push:
    needs: [version-check, prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
      - name: Docker Multi Login
        uses: ./.github/actions/docker-multi-login-action
        env:
          secrets: ${{ toJSON(secrets) }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./images/${{ github.workflow }}/Dockerfile
          build-args: VERSION=${{ needs.version-check.outputs.tag }}
          platforms: ${{ env.PLATFORMS }}
          tags: ${{ needs.prepare.outputs.fully-qualified-target-images }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
      - name: Inspect
        run: |
          IFS=',' read -r -a images <<< "${{ needs.prepare.outputs.fully-qualified-target-images }}"
          for image in "${images[@]}"; do
              docker buildx imagetools inspect ${image}
          done