name: radarr
on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'version'
        required: false
      ignoreVersionCheck:
        description: 'true/false'
        required: false
env:
  IMAGES: ${{ github.repository_owner }}/${{ github.workflow }}
  PLATFORMS: "linux/amd64,linux/arm64,linux/arm/v7"
jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Get Version
        id: check
        run: |
          export VERSION=$(curl -s "https://radarr.lidarr.audio/v1/update/aphrodite/changes?os=linux" | jq -r '.[0].version')
          echo VERSION=$VERSION
          MATCH="$(curl -s https://registry.hub.docker.com/v1/repositories/itscontained/radarr/tags | jq -r '.[] | select(.name==env.VERSION) | .name')"
          if [[ -z "$MATCH" ]] || [[ "${{ github.event.inputs.ignoreVersionCheck }}" != "" ]]
          then
            echo Setting version output for build job
            echo ::set-output name=version::$VERSION
          else
            echo Found existing tag in repo
            echo ::set-output name=version::""
          fi
  multiarch:
    needs: version-check
    if: needs.version-check.outputs.version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest
          driver-opts: image=moby/buildkit:master
      - name: Docker Multi Login
        uses: ./.github/actions/docker-multi-login-action
        env:
          QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
          QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_PASSWORD: ${{ secrets.GHCR_PASSWORD }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      - uses: ./.github/actions/docker-target-image-list-action
        name: Generate Target Images
        id: gen-tags
        with:
          images: ${{ env.IMAGES }}
          tags: ${{ needs.version-check.outputs.version }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./images/${{ github.workflow }}/Dockerfile
          build-args: VERSION=${{ needs.version-check.outputs.version }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.gen-tags.outputs.fully-qualified-target-images }}
      - name: Inspect
        run: |
          IFS=',' read -r -a images <<< "${{ steps.gen-tags.outputs.fully-qualified-target-images }}"
          for image in "${images[@]}"; do
              docker buildx imagetools inspect ${image}
          done
